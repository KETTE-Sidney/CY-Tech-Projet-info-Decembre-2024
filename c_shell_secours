#!/bin/bash

# Function to display help
show_help() {
    echo "Usage: $0 <data_file> <station_type> <consumer_type> [central_id]"
    echo
    echo "Arguments:"
    echo "  data_file       Chemin vers le fichier CSV d'entrée (obligatoire)."
    echo "  station_type    Type de station à traiter (obligatoire) : hvb, hva, lv."
    echo "  consumer_type   Type de consommateur à traiter (obligatoire) : comp, indiv, all."
    echo "  central_id      Optionnel : Filtrer les résultats par ID central."
    echo
    echo "Options:"
    echo "  -h              Afficher ce message d'aide."
    echo
    echo "Examples:"
    echo "  $0 input/data.csv hvb comp"
    echo "  $0 input/data.csv lv all 1"
    exit 0
}

# Check if help is requested
if [[ "$1" == "-h" ]]; then
    show_help
fi

# Validate the number of arguments
if [[ $# -lt 3 ]]; then
    echo "Erreur : Arguments manquants."
    show_help
fi

# Assign arguments to variables
DATA_FILE=$1
STATION_TYPE=$2
CONSUMER_TYPE=$3
CENTRAL_ID=${4:-"all"}  # Default to "all" if not provided

# Validate input file
if [[ ! -f "$DATA_FILE" ]]; then
    echo "Erreur : Fichier d'entrée '$DATA_FILE' introuvable."
    exit 1
fi

# Validate station type
if [[ "$STATION_TYPE" != "hvb" && "$STATION_TYPE" != "hva" && "$STATION_TYPE" != "lv" ]]; then
    echo "Erreur : Type de station invalide '$STATION_TYPE'."
    exit 1
fi

# Validate consumer type
if [[ "$CONSUMER_TYPE" != "comp" && "$CONSUMER_TYPE" != "indiv" && "$CONSUMER_TYPE" != "all" ]]; then
    echo "Erreur : Type de consommateur invalide '$CONSUMER_TYPE'."
    exit 1
fi

# Handle invalid combinations of station and consumer types
if { [[ "$STATION_TYPE" == "hvb" || "$STATION_TYPE" == "hva" ]] && [[ "$CONSUMER_TYPE" == "all" || "$CONSUMER_TYPE" == "indiv" ]]; }; then
    echo "Erreur : Type de consommateur '$CONSUMER_TYPE' n'est pas autorisé avec le type de station '$STATION_TYPE'."
    exit 1
fi

# Create necessary directories
mkdir -p tmp tests graphs

# Filter data
FILTERED_FILE="tmp/filtered_${STATION_TYPE}_${CONSUMER_TYPE}.csv"
awk -F':' -v station="$STATION_TYPE" -v central="$CENTRAL_ID" '
BEGIN { OFS=":"; print "StationID:Capacite:Consommation:Type" }
{
    # Filter data based on station type and central ID
    if (central == "all" || $1 == central) {
        if ($4 == station) print $1, $2, $3, $4
    }
}' "$DATA_FILE" > "$FILTERED_FILE"

# Check if filtered file is empty
if [[ ! -s "$FILTERED_FILE" ]]; then
    echo "Erreur : Aucune donnée trouvée correspondant aux filtres."
    exit 1
fi

# Calculate totals
TOTAL_CAPACITE=$(awk -F':' 'NR > 1 { sum += $2 } END { print sum }' "$FILTERED_FILE")
TOTAL_CONSOMMATION=$(awk -F':' 'NR > 1 { sum += $3 } END { print sum }' "$FILTERED_FILE")

# Check production status
if [[ "$TOTAL_CAPACITE" -gt "$TOTAL_CONSOMMATION" ]]; then
    PRODUCTION_STATUS="Sous-production"
elif [[ "$TOTAL_CAPACITE" -lt "$TOTAL_CONSOMMATION" ]]; then
    PRODUCTION_STATUS="Surproduction"
else
    PRODUCTION_STATUS="Équilibrée"
fi

# Write summary to file
SUMMARY_FILE="tests/summary_${STATION_TYPE}_${CONSUMER_TYPE}.txt"
echo "Résumé des stations ($STATION_TYPE, $CONSUMER_TYPE):" > "$SUMMARY_FILE"
echo "Capacité totale : $TOTAL_CAPACITE" >> "$SUMMARY_FILE"
echo "Consommation totale : $TOTAL_CONSOMMATION" >> "$SUMMARY_FILE"
echo "Production globale : $PRODUCTION_STATUS" >> "$SUMMARY_FILE"

# Compile and execute the C program
cd codeC
if [[ ! -f main ]]; then
    echo "Compilation du programme C..."
    make
    if [[ $? -ne 0 ]]; then
        echo "Erreur : La compilation a échoué."
        exit 1
    fi
fi
cd ..

OUTPUT_FILE="tests/results_${STATION_TYPE}_${CONSUMER_TYPE}.csv"
./codeC/main "$FILTERED_FILE" "$OUTPUT_FILE" "$STATION_TYPE"

if [[ $? -ne 0 ]]; then
    echo "Erreur : Le programme C a rencontré un problème."
    exit 1
fi

# Special case for lv all
if [[ "$STATION_TYPE" == "lv" && "$CONSUMER_TYPE" == "all" ]]; then
    GRAPH_FILE="graphs/lv_minmax.png"
    MINMAX_FILE="tests/lv_minmax.csv"

    echo "StationID:Capacity:Consumption" > "$MINMAX_FILE"
    tail -n +2 "$OUTPUT_FILE" | sort -t: -k3nr | head -n 10 >> "$MINMAX_FILE"
    tail -n +2 "$OUTPUT_FILE" | sort -t: -k3n | head -n 10 >> "$MINMAX_FILE"

    gnuplot <<-EOF
        set terminal png size 1000,700
        set output "$GRAPH_FILE"
        set title "Top and Bottom 10 LV Stations"
        set xlabel "Station ID"
        set ylabel "Energy (kWh)"
        set grid
        set style data histogram
        set style histogram cluster gap 1
        set style fill solid
        set boxwidth 0.9
        plot "$MINMAX_FILE" using 2:xtic(1) title "Capacity", \
             "$MINMAX_FILE" using 3:xtic(1) title "Consumption"
EOF
    echo "Graphique généré : $GRAPH_FILE"
fi

echo "Traitement terminé. Résumé et résultats enregistrés dans 'tests/'."

